/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package genetic.mathparser.aldy;

import io.jenetics.DoubleGene;
import io.jenetics.MeanAlterer;
import io.jenetics.Mutator;
import io.jenetics.Optimize;
import io.jenetics.Phenotype;
import io.jenetics.engine.Codecs;
import io.jenetics.engine.Engine;
import static io.jenetics.engine.EvolutionResult.toBestPhenotype;
import io.jenetics.engine.EvolutionStatistics;
import static io.jenetics.engine.Limits.bySteadyFitness;
import io.jenetics.util.DoubleRange;
import java.util.ArrayList;
import java.util.List;

import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.mariuszgromada.math.mxparser.*;

/**
 *
 * @author Aldy Marcellino Christian - 2013730005
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public final static String EMPTY = "";
    public final static String NEW_LINE = "\n";
    public final static String COMMA = ",";
    public final static String SPACE = " ";
    public final static String DOUBLE_DOT = ":";
    public final static String LIMIT_SPACE = "========================";
    private static String inputFunc;
    private static String symExp;
    private static String[] argSplit;

    public MainFrame() {
        initComponents();

        MainFrame.inputFunc = EMPTY;
        MainFrame.symExp = EMPTY;
        MainFrame.argSplit = null;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        txtInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Genetic Math Parser Application by Aldy, UNPAR - 2018");
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Input Function :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        txtOutput.setColumns(20);
        txtOutput.setFont(new java.awt.Font("Monospaced", 1, 11)); // NOI18N
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 740, 330));
        jPanel1.add(txtInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 22, 540, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Process Output :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 22, 90, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        // TODO add your handling code here:
        txtOutput.setText(EMPTY);
        String input = txtInput.getText().toLowerCase().trim();

        /*if(input.equals(EMPTY)){
           JOptionPane.showMessageDialog(this, "Input Function Can NOT Empty, Fill The Box", 
                   "Warning", JOptionPane.WARNING_MESSAGE);
           return;
       }*/
        ProductionRules PR = new ProductionRules();
        Derivatives DR = new Derivatives();

        for (int i = 0; i < 500; i++) {
            int[] chromosome = PR.randomIntegerArray(ProductionRules.MAX_CHROMOSOME);
            String str_chromosome = PR.stringRandomIntegerArray(chromosome);

            List<String> list_str_output = PR.startProductionRules(chromosome);
            String output_func = list_str_output.get(list_str_output.size() - 1);

            String c_output = "Individual - " + String.valueOf(i + 1) + MainFrame.DOUBLE_DOT
                    + MainFrame.NEW_LINE + str_chromosome;
            for (String str : list_str_output) {
                c_output += MainFrame.NEW_LINE + str;
            }

            String func = list_str_output.get(list_str_output.size() - 1);

            List<String> output1 = DR.DerivativeParser(func);
            String func1 = DR.DerivativeFunc(output1);

            List<String> output2 = DR.DerivativeParser(func1);
            String func2 = DR.DerivativeFunc(output2);

            c_output += MainFrame.NEW_LINE + "FUNC = " + func;
            c_output += MainFrame.NEW_LINE + "FUNC(1) = " + func1;
            c_output += MainFrame.NEW_LINE + "FUNC(2) = " + func2;
            c_output += MainFrame.NEW_LINE + MainFrame.LIMIT_SPACE + MainFrame.NEW_LINE;

            txtOutput.setText(txtOutput.getText() + c_output);
            int len = txtOutput.getDocument().getLength();
            txtOutput.setCaretPosition(len);
            txtOutput.requestFocusInWindow();
            txtOutput.update(txtOutput.getGraphics());

            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnCalculateActionPerformed

    private void calculateGenetic(String input) {
        try {
            String[] input_split = input.split("=");
            String sym = input_split[0].trim();
            String[] sym_split = sym.split("\\(");
            String sym_exp = sym_split[0].trim();
            String sym_arg = sym_split[1].trim().replace(")", EMPTY);
            String[] arg_split = sym_arg.split(",");

            MainFrame.inputFunc = input;
            MainFrame.symExp = sym_exp;
            MainFrame.argSplit = arg_split;

            this.startGenetic();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Calculation FAILED, Please Fix Your Input Function, Maybe Your Format Input NOT Recognized by System",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private static double inputParser(double[] x) {

        try {
            String input = MainFrame.inputFunc;
            String[] input_split = input.split("=");
            String sym = input_split[0].trim();
            String[] sym_split = sym.split("\\(");
            String sym_exp = sym_split[0].trim();
            String sym_arg = sym_split[1].trim().replace(")", EMPTY);
            String[] arg_split = sym_arg.split(",");
            String[] input_num = new String[x.length];
            int i = 0;
            for (double arg : x) {
                input_num[i] = String.valueOf(arg);
                i++;
            }

            return calcMathParser(input, sym_exp, input_num);
        } catch (Exception e) {
            return Double.MAX_VALUE;
        }
    }

    private static double fitness(final double[] x) {
        return inputParser(x);
    }

    private void startGenetic() throws Exception {
        int count = MainFrame.argSplit.length;

        if (count == 0) {
            throw new Exception("");
        }

        final Engine<DoubleGene, Double> engine = Engine
                .builder(MainFrame::fitness,
                        Codecs.ofVector(DoubleRange.of(0.0, 1000.0), count))
                .populationSize(10)
                .optimize(Optimize.MINIMUM)
                .alterers(new Mutator<>(0.03), new MeanAlterer<>(0.6))
                .build();

        final EvolutionStatistics<Double, ?> statistics
                = EvolutionStatistics.ofNumber();

        final Phenotype<DoubleGene, Double> best = engine.stream()
                .limit(bySteadyFitness(7))
                .peek(statistics)
                .collect(toBestPhenotype());

        System.out.println(statistics);
        System.out.println(best);

        txtOutput.setText(txtOutput.getText() + NEW_LINE + statistics);
        txtOutput.setText(txtOutput.getText() + NEW_LINE + NEW_LINE + "BEST SOLUTION = " + best);

    }

    private static double calcMathParser(String input, String sym_exp, String[] input_num) {

        String exp = sym_exp + "(";
        for (String num : input_num) {
            exp += num + ",";
        }

        exp = exp.substring(0, exp.length() - 1);
        exp += ")";
        exp.trim();

        Function function = new Function(input);
        Expression expression = new Expression(exp, function);

        String info = expression.getExpressionString() + " = " + expression.calculate();
        txtOutput.setText(txtOutput.getText() + NEW_LINE + info);

        try {
            return expression.calculate();
        } catch (Exception e) {
            return Double.MAX_VALUE;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtInput;
    private static javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
